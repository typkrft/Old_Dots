#!/bin/sh

# TODO: ADD add Paths and Universally Used Variables out of function scope

export PATH=$PATH:/opt/homebrew/bin
export PATH=$PATH:/usr/local/bin
export PATH=$PATH:$HOME/.go/bin
export PATH=$PATH:$HOME/.config/bin
export PATH=$PATH:/Applications/kitty.app/Contents/MacOS
export PATH=$PATH:/opt/homebrew/sbin
export PATH=$PATH:/usr/local/opt/python/libexec/bin
export PATH=$PATH:$HOME/Library/Python/3.7/bin

# H E L P E R  F U N C T I O N S

# S K H D
# N O R M A L  M O D E 
function normal_mode() {
  echo "N O R M A L  M O D E";

  # C O L O R S
  . $HOME/.cache/wal/colors.sh;
  
  # Y A B A I
  yabai -m config active_window_border_color 0xff${color5:1};
  yabai -m config normal_window_border_color 0xff${color8:1};
  yabai -m config insert_feedback_color 0xff${color5:1};

  # S K E T C H Y B A R 
  sketchybar -m config bar_color 0x5F${color0:1}
  sketchybar -m default label_color 0xFF${foreground:1}  
  sketchybar -m default icon_color 0xFF${color5:1}
  sketchybar -m set modal icon_color 0xFF83A1F1
  sketchybar -m set modal icon "[N]"
}

# W I N D O W  M O D E
function window_mode() {
  echo "W I N D O W  M O D E";    

  # C O L O R S
  . $HOME/.cache/wal/colors.sh;

  # Y A B A I
  yabai -m config active_window_border_color 0xff${color3:1};
  yabai -m config normal_window_border_color 0xff${color3:1};
  yabai -m config insert_feedback_color 0xff${color3:1};

  # S K E T C H Y B A R 
  sketchybar -m config bar_color 0x5F${color3:1}
  sketchybar -m default label_color 0xFF${foreground:1}  
  sketchybar -m default icon_color 0xFF${background:1}
  sketchybar -m set modal icon_color 0xFFA8CD76
  sketchybar -m set modal icon "[W]"
}

# S C R I P T S  M O D E
function scripts_mode() {
  echo "S C R I P T S  M O D E";

  # C O L O R S
  . $HOME/.cache/wal/colors.sh;
  
  # Y A B A I
  yabai -m config active_window_border_color 0xff${color5:1};
  yabai -m config normal_window_border_color 0xff${color5:1};
  yabai -m config insert_feedback_color 0xff${color5:1};

  # S K E T C H Y B A R 
  sketchybar -m config bar_color 0x5F${color5:1}
  sketchybar -m default label_color 0xFF${foreground:1}  
  sketchybar -m default icon_color 0xFF${color6:1}
  sketchybar -m set modal icon_color 0xFFF29B9B
  sketchybar -m set modal icon "[S]"
}

# S E T  W A L L P A P E R
function set_wallpaper() {
  CURRENT_DESKTOP=$(yabai -m query --spaces | grep -a5 \"focused\":1 | grep index | sed -r 's/.*([[:digit:]]).*/\1/')
  TOTAL_SPACES=$(yabai -m query --spaces | jq '.[]|.["native-fullscreen"]' | grep -c 0)
  
  if [[ $1 = "" ]]; then
    WALLPAPER=$(osascript -e "tell application \"Finder\" to set wallpaper to get POSIX path of (get desktop picture as alias)")
  elif [[ $1 != "" ]]; then
    WALLPAPER=$1
  fi

  [[ $CURRENT_DESKTOP -ne 1 ]] && yabai -m space --focus 1 || :

  for SPACE in $(seq 1 $TOTAL_SPACES)
    do
      yabai -m space --focus $SPACE
      echo $SPACE
      sleep .25
      osascript -e "tell application \"Finder\" to set desktop picture to POSIX file \"$WALLPAPER\""
    done
  yabai -m space --focus $CURRENT_DESKTOP
}

function shuffle_wallpaper(){
  [[ -d /Volumes/Wallpapers ]] && WALL_DIR="/Volumes/Wallpapers" || WALL_DIR="/Users/brandon/Documents/Personal/Brandon/Photos/Wallpapers"
  find $WALL_DIR -type f -print0 | \
  shuf -z -n 1| \
  xargs -I{} \
  osascript -e "tell application \"Finder\" to set desktop picture to POSIX file \"{}\""
}

# T O G G L E  S E R V I C E S
function toggle_service() {
  SERVICE=$1

  case $SERVICE in
    yabai) 
      # Yabai requires full forumla in service commands
      [[ $SERVICE == "yabai" ]] && YABAI=xorpse/formulae/yabai || :;
      # Other Services Start/Stop
      pgrep $SERVICE && brew services stop $YABAI || brew services start $YABAI;
    ;;
    skhd) 
      # Don't stop SKHD
      if [[ $SERVICE == "skhd" ]]; then
        brew services restart skhd;
      fi
    ;;
    spacebar)
      pgrep -x $SERVICE && brew services stop $SERVICE || brew services start $SERVICE;
      sleep .25;
      pgrep spacebar && yabai -m config external_bar main:$(spacebar -m config height):0 || yabai -m config external_bar main:0:0;
    ;;
    sketchybar)
      if [[ $(pgrep sketchybar) = "" ]]; then
        sketchybar &>/dev/null & disown;
        yabai -m config external_bar main:$(sketchybar -m config height):0
       else
        yabai -m config external_bar main:0:0
      fi
    ;;
    *) echo default
      pgrep $SERVICE && brew services stop $SERVICE || brew services start $SERVICE;
    ;;
  esac
  sleep .25;
  scripts_mode
}

# TODO: Add Save Colorscheme
# TODO: Add Cycle Favorite Colorshemes
# TODO: Keybindings for saturation and backends
function update_colors() {
    case $1 in
        c) # Current Wallpaper Colorscheme            
            CURRENT_WALLPAPER=$(osascript -e "tell application \"Finder\" to set wallpaper to get POSIX path of (get desktop picture as alias)")
            wal --backend schemer2 --saturate 1.0 -n -s -i "$CURRENT_WALLPAPER"
            ;;
        n) # New Walllpaper Colorscheme
            shuffle_wallpaper
            CURRENT_WALLPAPER=$(osascript -e "tell application \"Finder\" to set wallpaper to get POSIX path of (get desktop picture as alias)")
            wal -n -s --backend schemer2 --saturate 1.0 -i "$CURRENT_WALLPAPER"
            ;;
        s) # Keep Wallpaper, Shuffle Colorsheme
            wal -n -s --backend schemer2 --saturate 1.0 --recursive -i /Volumes/Wallpapers
            ;;
        S) # Save Scheme
            ;;
        f) # Cycle Favorite Schemes
            ;;
        *) 
            echo default
            ;;
    esac


    # Update Various App Colorschemes
    osascript -e "tell application \"Alfred 4\" to set theme \"Wal\""
    pywalfox update
    kitty @ --to="unix:/tmp/mykitty" set-colors -a -c $HOME/.cache/wal/colors-kitty.conf 
    scripts_mode 
}

# Y A B A I
# TODO: Make a layout and stack indicator
# C L O S E  W I N D O W S
function close_window() {
  if [[ $(yabai -m query --windows --window |grep \"native-fullscreen\":1) ]]; then
    yabai -m window --toggle native-fullscreen;
    yabai -m window --close;
    skhd -k "escape";
  else
    yabai -m window --close;
  fi
}
# T O G G L E  G A P S  A N D  B O R D E R S
function toggle_gabs_and_borders() {
  if [[ $(yabai -m config window_border) == on ]]; then
    yabai -m space --toggle gap;
    yabai -m space --toggle padding;
  elif [[ $(yabai -m config window_border) == off ]]; then
    yabai -m space --toggle gap;
    yabai -m space --toggle padding;
    yabai -m config window_border on;
  fi
  skhd -k "escape"
}
# T O G G L E  W I N D O W  L A Y O U T S
function toggle_layouts(){
  if [[ $(yabai -m query --spaces | jq '[.[]|select(.focused==1)][0].type') == *"bsp"* ]]; then
    yabai -m query --spaces \
    | jq '[.[]|select(.focused==1)][0].index' \
    | xargs -I {} yabai -m space {} --layout stack;
  elif [[ $(yabai -m query --spaces | jq '[.[]|select(.focused==1)][0].type') == *"stack"* ]]; then
    yabai -m query --spaces \
    | jq '[.[]|select(.focused==1)][0].index' \
    | xargs -I {} yabai -m space {} --layout float;
  elif [[ $(yabai -m query --spaces | jq '[.[]|select(.focused==1)][0].type') == *"float"* ]]; then \
    yabai -m query --spaces \
    | jq '[.[]|select(.focused==1)][0].index' \
    | xargs -I {} yabai -m space {} --layout bsp; \
  fi
}

# I N S E R T  A P P  W I N D O W S  I N T O  S T A C K
# TODO: setup function so any app can do this. 
function kitty_quake() {
  KITTY=$(pgrep -a -f ".*kitty.*")  
  QUAKE=$(osascript -l JavaScript -e 'Application("System Events").processes.whose({name: "kitty"}).windows.whose({name: "Quake"}).name()')
  if [[ $KITTY == "" ]]; then
    open -a kitty -n --args -1 --listen-on=unix:/tmp/kitty -o macos_quit_when_last_window_closed=no false
    while [[ $KITTY == "" ]]
    do
      KITTY=$(pgrep -a -f ".*kitty.*")  
      # sleep .25
    done
    # osascript -l JavaScript -e "Application('kitty').activate()" -e "Application('System Events').processes['kitty'].menuBars[0].menuBarItems.byName('Shell').menus[0].menuItems.byName('Close OS Window').click()"
    open -a kitty -n --args -1 --listen-on=unix:/tmp/kitty --title=Quake
    while [[ $QUAKE != "Quake" ]]
    do
      QUAKE=$(osascript -l JavaScript -e 'Application("System Events").processes.whose({name: "kitty"}).windows.whose({name: "Quake"}).name()')
      # sleep .1
    done
    # osascript -l JavaScript -e "Application('kitty').activate()"
    WINDOW_ID=$(GetWindowID kitty 'Quake')
    yabai -m window $WINDOW_ID --toggle sticky
    yabai -m window $WINDOW_ID --move abs:0:0
    yabai -m window $WINDOW_ID --resize abs:10000:450
    yabai -m window $WINDOW_ID --opacity 0.95
    exit 0    
  elif [[ $KITTY != "" && $QUAKE == "" ]]; then
    open -a kitty -n --args -1 --listen-on=unix:/tmp/kitty --title=Quake
    while [[ $QUAKE != "Quake" ]]
    do
      QUAKE=$(osascript -l JavaScript -e 'Application("System Events").processes.whose({name: "kitty"}).windows.whose({name: "Quake"}).name()')
      # sleep .1
    done
    WINDOW_ID=$(GetWindowID kitty 'Quake')
    yabai -m window $WINDOW_ID --toggle sticky
    yabai -m window $WINDOW_ID --move abs:0:0
    yabai -m window $WINDOW_ID --resize abs:10000:450
    yabai -m window $WINDOW_ID --opacity 0.95
  elif [[ $KITTY != "" && $QUAKE != "" ]]; then
    WINDOW_ID=$(GetWindowID kitty 'Quake')
    INFO=$(yabai -m query --windows --window $WINDOW_ID | jq '.border, .minimized')
    BORDER=$(echo $INFO | awk '{print $1}')
    MINI=$(echo $INFO | awk '{print $2}')
    # MINI=$(osascript -l JavaScript -e 'Application("System Events").processes.whose({name: "kitty"}).windows.whose({name: "Quake"}).attributes.byName("AXMinimized").value()[0][0]')
    # INFO=$(yabai -m query --windows --window $ID | jq '.[]|select(.title=="Quake")|.minimized,.id,.border')
    # ID=$(echo $INFO | awk '{print $2}')
    if [[ $MINI -eq 1 ]]; then
      [[ $BORDER -eq 1 ]] && yabai -m window "$WNDOW_ID" --toggle border || :
      yabai -m window "$WINDOW_ID" --deminimize;
      # yabai -m window "$ID" --move abs:0:0;
      # yabai -m window "$ID" --resize abs:10000:450;
      yabai -m window "$WINDOW_ID" --opacity 0.95;
      [[ $BORDER -eq 0 ]] && yabai -m window "$WNDOW_ID" --toggle border || :
      yabai -m window "$WINDOW_ID" --focus "$WINDOW_ID";
      exit 0
    elif [[ $MINI -eq 0 ]]; then
      [[ $BORDER -eq 1 ]] && yabai -m window "$WINDOW_ID" --toggle border || :
      yabai -m window "$WINDOW_ID" --opacity 0.001;
      yabai -m window "$WINDOW_ID" --minimize;
      exit 0
    fi
  fi
}

# TODO: Setup a title filter instead of hard coding it just for kitty
function stack_app() {
  APP_TO_STACK="$*"
  CURRENT_APP="$(yabai -m query --windows --window | jq '.app' | sed -E 's/"(.*)"/\1/')"
  WINDOW_TITLE=$(yabai -m query --windows --window | jq '.title' | sed -E 's/"(.*)"/\1/')
  
  if [[ $APP_TO_STACK == $CURRENT_APP ]]; then
    if [[ $CURRENT_APP == "kitty" ]]; then
      if [[ $WINDOW_TITLE == "Quake" ]]; then
        open -a kitty.app -n --args -1
        exit 0
      fi
    fi
    yabai -m window --insert stack
    osascript -e "tell application \"System Events\" to tell application process \"$CURRENT_APP\" to tell menu 1 of menu bar item 3 of menu bar 1 to click (first menu item whose value of attribute \"AXMenuItemCmdChar\" is \"N\" and value of attribute \"AXMenuItemCmdModifiers\" is 0)"
  fi
}

# C R E A T E  S P A C E S
# TODO: Create another function that runs hack if neccessary else native
function create_spaces() {
    TOTAL_SPACES=$(yabai -m query --spaces | jq '.[]|.["native-fullscreen"]' | grep -c 0)
    DESIRED_SPACES=$1
    SPACES_TO_CREATE=$(($DESIRED_SPACES - $TOTAL_SPACES))
    echo $SPACES_TO_CREATE

    if [[ ${SPACES_TO_CREATE} -le 0 ]]; then
        echo "$TOTAL_SPACES are available."
        exit 0
    elif [[ ${SPACES_TO_CREATE} -gt 0 ]]; then
        for space in ${SPACES_TO_CREATE}
            do 
              yabai -m space --create;
            done
    fi
}

# S I P  H A C K S 
# C R E A T E  S P A C E S
function create_spaces_hack() {
    TOTAL_SPACES=$(($(yabai -m query --spaces | grep -c "id") - $(yabai -m query --spaces | grep -c '"native-fullscreen":1')))
    ARGS=$(echo "${*} $TOTAL_SPACES")

    osascript - "${ARGS}" <<EOF
    on run argv
        set argv to argv as string
        set argv to words of argv

        set desired_spaces to item 1 of argv as number
        set additional_or_total to item 2 of argv as boolean -- true is total
        set total_spaces to item 3 of argv as number
        
        if additional_or_total is true and desired_spaces < total_spaces then
            -- look for empty spaces to remove maybe
            tell me to "exit"
        else if additional_or_total is true and desired_spaces > total_spaces then
            repeat desired_spaces - total_spaces times
                do shell script "open -a 'Mission Control'"
                delay 0.1
                tell application "System Events" to click (every button whose value of attribute "AXDescription" is "add desktop") of UI element "Spaces Bar" of UI element 1 of group 1 of process "Dock"
                delay 0.1
                do shell script "open -a 'Mission Control'"
            end repeat
        else if additional_or_total is false then
            repeat desired_spaces times
                do shell script "open -a 'Mission Control'"
                delay 0.1
                tell application "System Events" to click (every button whose value of attribute "AXDescription" is "add desktop") of UI element "Spaces Bar" of UI element 1 of group 1 of process "Dock"
                delay 0.1
                do shell script "open -a 'Mission Control'"
            end repeat
        end if
    end run
EOF
}

# M O V E  S P A C E S
# TODO: Needs check for out of bounds e.g.: move to 100 or -1
function move_spaces_hack() {
    CURRENT_DESKTOP=$($HOMEBREW/yabai -m query --spaces | grep -a5 \"focused\":1 | grep index | sed -r 's/.*([[:digit:]]).*/\1/')
    DESIRED_DESKTOP=$1
    ARGS="$CURRENT_DESKTOP $DESIRED_DESKTOP"

    osascript - "${ARGS}" <<EOF
    on run argv
        set argv to argv as string
        set argv to words of argv
        set current_space to item 1 of argv as integer
        set desired_space to item 2 of argv as integer

        if desired_space - current_space < 0 then
		set a to desired_space - current_space
		set a to a as string
		set moves to item 2 of a as integer
		tell application "System Events"
			repeat moves times
				key code 123 using control down
				delay 0.1
			end repeat
		end tell
	else if desired_space - current_space > 0 then
		tell application "System Events"
			repeat desired_space - current_space times
				key code 124 using control down
				delay 0.1
			end repeat
		end tell
	else if desired_space - current_space is 0 then
		-- log "Desired Desktop is Current Desktop"
	else
		-- log "failed"
	end if
    end run
EOF
}

# M I S C
# V P N
# TODO: Work on colors and add VPN Center Title
function toggle_vpn() {
  skhd -k "escape"; 
  VPN_STATUS=$(networksetup -showpppoestatus "Myrtle Beach Office VPN")
  if [[ $VPN_STATUS == "disconnected"  ]]; then
    networksetup -connectpppoeservice "Myrtle Beach Office VPN";
    sketchybar -m set vpn enabled on
    sketchybar -m set vpn_sep enabled on
    spacebar -m config right_shell_command "$HOME/.config/bin/helpers -v"
  elif [[ $VPN_STATUS == "connected"  ]]; then
    networksetup -disconnectpppoeservice "Myrtle Beach Office VPN";
    normal_mode
    sketchybar -m set vpn enabled off
    sketchybar -m set vpn_sep enabled off
  fi; 
}

# P A S S W O R D
# NOTE: this is for password entry fields that don't let you paste in them
function paste_text() {
  osascript -e '
    tell application "System Events" to keystroke (the clipboard as text)
  '
}

# P A R S E  O P T S
# For GETOPT : = required param :: = optional param 
# For GETOPTS just use $2 if you need an optional param
while getopts "nwsmvict:S:M:w:C:WpP:VlgxT:Qqe" flag
do
  case "${flag}" in
    n) 
      normal_mode
      ;;
    w) 
      window_mode
      ;;
    s) 
      scripts_mode
      ;;
    m) 
      spacebar_music_info
      ;;
    v) 
      spacebar_vpn_info
      ;;
    i) 
      spacebar_investment_info
      ;;
    c) 
      spacebar_cmd_select
      ;;
    t) 
      toggle_service ${OPTARG}
      ;;
    S) 
      create_spaces_hack ${OPTARG}
      ;;
    M) 
      move_spaces_hack ${OPTARG}
      ;;
    C)
      create_spaces ${OPTARG}
      ;;
    W)
      set_wallpaper $2
      ;;
    p)
      shuffle_wallpaper
      ;;
    P) 
      update_colors ${OPTARG}
      ;;
    V) 
      toggle_vpn
      ;;
    l) 
      toggle_layouts
      ;;
    g) 
      toggle_gabs_and_borders
      ;;
    x) 
      close_window
      ;;
    T) 
      stack_app ${OPTARG}
      ;;
    Q) 
      kitty_quake
      ;;
    q)  
      kitty_quake_tab
      ;;
    e)
      paste_text
      ;;
    *) 
      echo "Invalid option: -$flag" 
      ;;
  esac
done
